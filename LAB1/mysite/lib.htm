<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- InstanceBegin template="/Templates/net.dwt" codeOutsideHTMLIsLocked="false" -->
<head>
<!-- InstanceBeginEditable name="doctitle" --> 
<title>Библиотека классов | Технология .Net | mista.ru</title>
<!-- InstanceEndEditable -->
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
 <!-- InstanceBeginEditable name="head" --><!-- InstanceEndEditable -->
<link href="../style.css" rel="stylesheet" type="text/css">
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#0000CC" vlink="#990066" alink="#CC0066" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td width="180" background="fon2.gif" bgcolor="#FFFFCC" class="unnamed1"> 
      <a name="begin"></a><a href="http://www.mista.ru"><img src="logo.gif" alt="Информационные системы" width="180" height="70" border="0"></a></td>
    <td background="fon2.gif" bgcolor="#FFFFCC" class="unnamed5"> 
      <div align="center"><!-- InstanceBeginEditable name="title" --><font color="#CC0000" size="6" face="Verdana, Arial, Helvetica, sans-serif">Библиотека 
        классов .Net</font><!-- InstanceEndEditable --></div></td>
  </tr>
</table>
<table width="100%" height="90%" border="0" cellpadding="0" cellspacing="0">
  <tr> 
    <td width="180" valign="top" background="fon.gif" bgcolor="#FFFFCC" class="unnamed1"> 
      <table width="175" border="0" align="right" cellpadding="0" cellspacing="0">
        <tr> 
          <td width="100%" valign="top"> 
            <p><font color="#CC0000" size="3" face="Arial, Helvetica, sans-serif"><a href="../it.htm"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><font color="#CC0000" size="3" face="Arial, Helvetica, sans-serif"><br>
              Информационные технологии</font></strong></font></a> </font></p>
            <p><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><font size="2"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><img src="../ball.gif" width="17" height="17" align="absmiddle"> 
              <a href="index.htm">Технология .Net </a></strong></font></font></strong></font></p>
            <p><font face="Arial, Helvetica, sans-serif" size="2"><a href="intro.htm">Что 
              такое .Net</a><br>
              </font><font face="Arial, Helvetica, sans-serif" size="2"><a href="net_framework.htm">.Net 
              Framework</a><br>
              <a href="vbnet_future.htm">VB.Net: дорога в будущее</a><br>
              <a href="vbnet_types.htm">Типы данных VB.Net</a><br>
              </font><font face="Arial, Helvetica, sans-serif" size="2"><a href="vbnet_impression.htm">Впечатление 
              от VB.Net</a><br>
              <a href="links.htm">Ссылки по Net</a> </font></p>
            <table width="99%" border="1" cellspacing="0" cellpadding="5" bordercolor="#FFCC33">
              <tr> 
                <td> <p><font face="Arial, Helvetica, sans-serif" size="2">1. 
                    <a href="clr.htm">CLR - Введение</a><br>
                    2. <a href="clr2.htm">CLR - Часть 2</a><br>
                    3. <a href="vs.htm">Visual Studio.Net</a><br>
                    4. <a href="lib.htm">Библиотека классов </a><br>
                    5. <a href="array.htm">Массивы и коллекции</a><br>
                    6. <a href="string.htm">Строки</a><br>
                    7. <a href="file.htm">Файлы и каталоги</a><br>
                    8. <a href="stream.htm">Потоки ввода-вывода</a></font></p>
                  <p align="right"><font face="Arial, Helvetica, sans-serif" size="2"><i><a href="http://www.compress.ru" target="_blank">Компьютер</a></i><a href="http://www.compress.ru" target="_blank"><i>Пресс</i></a> 
                    </font></p></td>
              </tr>
            </table>
            <br>
            <hr width="95%" size="1" noshade>
            <p><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><font size="2"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><img src="../ball.gif" width="17" height="17" align="absmiddle"> 
              <a href="../isu/index.htm">Инф. системы</a></strong></font></font><font size="2"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><br>
              <font size="2"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><img src="../ball.gif" width="17" height="17" align="absmiddle"> 
              <a href="../gorod/index.htm">Модель города</a></strong></font></font><br>
              <img src="../ball.gif" width="17" height="17" align="absmiddle"></strong></font> 
              <font color="#330099" face="Verdana, Arial, Helvetica, sans-serif"><a href="../itbooks.htm">Книги 
              и статьи</a></font></font></strong></font><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><br>
              <font size="2"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><img src="../ball.gif" width="17" height="17" align="absmiddle"></strong></font> 
              <a href="../era/index.htm">ЭРА</a> </font></strong></font></p>
            <p><a href="../1c.htm"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><font color="#CC0000" size="3" face="Arial, Helvetica, sans-serif">1С:Предприятие</font></strong></font></a> 
            </p>
            <p><font color="#CC0000" size="3" face="Arial, Helvetica, sans-serif"><a href="../interesting.htm"><font color="#330099" size="2" face="Verdana, Arial, Helvetica, sans-serif"><strong><font color="#CC0000" size="3" face="Arial, Helvetica, sans-serif">Интересное</font></strong></font></a></font> 
            </p>
            <!-- InstanceBeginEditable name="EditRegion2" --><!-- InstanceEndEditable --> 
            </td>
        </tr>
      </table>
    </td>
    <td valign="top" class="unnamed1">  
      <table width="100%" border="0" cellpadding="3" cellspacing="0">
        <tr> 
          <td valign="top" bgcolor="#FFFFCC" class="unnamed4"> <!-- InstanceBeginEditable name="navigation" --><a href="../index.htm">mista.ru</a> 
            / <a href="../it.htm">Инф. технологии</a> / <a href="index.htm">Технология 
            .Net</a> / Библиотека классов<!-- InstanceEndEditable --></td>
        </tr>
      </table>
      <table width="100%" border="0" cellspacing="0" cellpadding="5">
        <tr>
          <td height="65"><!-- InstanceBeginEditable name="text" --> 
            <p align="right"><font face="Arial, Helvetica, sans-serif" size="2">Алексей 
              Федоров<a href="http://www.compress.ru" target="_blank"><br>
              КомпьютерПресс</a> 2'2002</font></p>
            <p align="justify"><a class=contents href="http://www.compress.ru/Temp/2981/index.htm#01"><font face="Arial, Helvetica, sans-serif" size="2">Класс 
              Console и консольные приложения</font></a><font face="Arial, Helvetica, sans-serif" size="2"><br>
              <a class=contents 
href="http://www.compress.ru/Temp/2981/index.htm#02">Пространство имен System</a><br>
              <a class=contents href="http://www.compress.ru/Temp/2981/index.htm#03">Класс 
              Object</a><br>
              <a class=contents href="http://www.compress.ru/Temp/2981/index.htm#04">Класс 
              Type и пространство имен Reflection</a></font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">В 
              двух предыдущих частях данной статьи мы начали знакомство с Microsoft 
              .NET Framework — ключевым компонентом Microsoft .NET, представляющим 
              собой платформу для создания, внедрения и выполнения Web-сервисов 
              и приложений. Мы рассказали об основных компонентах Microsoft .NET 
              Framework и кратко описали их назначение. Мы также начали более 
              подробное рассмотрение Common Language Runtime (CLR) — среды выполнения 
              .NET-приложений. Завершили мы знакомство с Common Language Runtime 
              рассказом о Common Type System.</font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">В 
              этом номере мы начнем знакомство с библиотекой классов, рассмотрим 
              основные составляющие ее пространства имен и классы и приведем некоторые 
              примеры их использования. </font></p>
            <hr noshade size="1" width="85%">
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Библиотека 
              классов .NET Framework Class Library содержит классы, обеспечивающие 
              следующие функции:</font></p>
            <ul>
              <li><font face="Arial, Helvetica, sans-serif" size="2">поддержку 
                базовых и определяемых пользователями типов; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">поддержку 
                обработки исключительных ситуаций; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">операции 
                ввода/вывода и работу с потоками; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">обращение 
                к функциям операционной системы; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">доступ к 
                данным; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">возможность 
                создания Windows-приложений; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">возможность 
                создания клиентских и серверных Web-приложений; </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">возможность 
                создания Web-сервисов. </font></li>
            </ul>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Все 
              классы, реализованные в .NET Framework Class Library организованы 
              в виде пространств имен (namespaces). Каждое пространство имен содержит 
              классы и другие типы, которые относятся к специфическим задачам 
              или группе задач — операциям ввода/вывода, созданию Web-приложений, 
              работе с данными и XML-документами и т.п. В таблице показаны наиболее 
              важные пространства имен в библиотеке классов .NET. </font></p>
            <p align="center"><img src="lib_1.gif" width="308" height="246"></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">После 
              краткого обзора основных пространств имен мы готовы приступить к 
              более детальному рассмотрению библиотеки классов .NET. Первая остановка 
              в нашем путешествии будет не совсем обычной — вместо традиционного 
              рассмотрения базового класса Object, который служит предком всех 
              классов в библиотеке классов .NET, мы рассмотрим класс Console и 
              консольные приложения. Почему мы поступаем именно так, будет понятно 
              чуть позже.</font></p>
            <hr noshade size="1" width="85%">
            <h2><font face="Arial, Helvetica, sans-serif" size="3"><img src="rombik.gif" width="31" height="27" align="absmiddle"><a name=01></a>Класс 
              Console и консольные приложения</font></h2>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Используя 
              класс System.Console, мы можем создавать простейшие приложения для 
              среды .NET — консольные приложения, которые используют системное 
              окно для ввода и вывода информации и не требуют графического интерфейса. 
              Так как большинство примеров в данном цикле будет использовать консольные 
              приложения, мы начнем наше знакомство с библиотекой классов с класса 
              Console.</font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Класс 
              Console представляет собой стандартные потоки ввода, вывода и сообщений 
              об ошибках. Приложения, использующие данный класс, могут читать 
              символы из стандартного потока ввода (input stream) и выводить символы 
              в стандартный поток вывода (output stream). Ошибки выводятся в стандартный 
              поток сообщений об ошибках (error output stream). Эти три потока 
              автоматически ассоциируются с консолью при запуске приложения и 
              могут быть определены через свойства In, Out и Error класса Console. 
              По умолчанию стандартный поток ввода — это объект типа System.IO.TextReader, 
              а потоки вывода и сообщений об ошибках — объекты типа System.IO. 
              TextWriter. При необходимости мы можем переопределить эти потоки 
              в файловые потоки, сетевые потоки, потоки в памяти и т.п. </font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Используя 
              Visual Basic .NET, мы создаем консольное приложение как новый модуль, 
              который содержит подпрограмму с именем Main — она является точкой 
              входа в наше консольное приложение:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">'---------------------------------------  
' .NET – Консольное приложение  
'---------------------------------------  
Imports System  
Module Cons  
&nbsp;  
&nbsp;Sub Main()  
&nbsp;  
&nbsp;&nbsp;&nbsp; Console.WriteLine(".NET Console application")  
&nbsp;&nbsp;&nbsp; Console.ReadLine()  
&nbsp;  
&nbsp;End Sub  
&nbsp;  
End Module  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Методы 
              Read и ReadLine служат для чтения одного или более символов или 
              символа новой строки из стандартного потока ввода, а методы Write 
              и WriteLine — для вывода одного или более символов либо строки с 
              символом новой строки в стандартный поток вывода. </font></p>
            <p align="center"><img src="lib_2.gif" width="400" height="198"></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Методы 
              SetIn, SetOut и SetError позволяют переопределить стандартные потоки 
              ввода, вывода и ошибок. Эти методы ожидают аргумент типа TextWriter, 
              который описывает поток.</font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Теперь 
              мы полностью готовы начать изучение Microsoft .NET Class Library. 
              В следующем разделе мы рассмотрим пространство имен System и его 
              дочерние пространства имен.</font></p>
            <hr noshade size="1" width="85%">
            <h2><font face="Arial, Helvetica, sans-serif" size="3"><img src="rombik.gif" width="31" height="27" align="absmiddle"><a name=02></a>Пространство 
              имен System</font></h2>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Пространство 
              имен System является корневым пространством имен в Microsoft .NET 
              Class Library и содержит фундаментальные типы данных, реализованные 
              в .NET Framework. Это пространство имен содержит класс Object, который 
              служит предком для всех классов в библиотеке классов .NET, примитивные 
              и расширенные типы, а также более 100 дополнительных классов, используемых 
              для обработки исключительных ситуаций, управления доменами приложений, 
              сборки мусора и т.п. </font></p>
            <hr noshade size="1" width="85%">
            <h2><font face="Arial, Helvetica, sans-serif" size="3"><img src="rombik.gif" width="31" height="27" align="absmiddle"><a name=03></a>Класс 
              Object</font></h2>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Класс 
              System.Object служит предком для всех классов в библиотеке классов 
              .NET. Методы, реализованные в данном классе, показаны на следующем 
              рисунке.</font></p>
            <p align="center"><img src="lib_3.gif" width="200" height="190"></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Кратко 
              рассмотрим каждый из этих методов:</font></p>
            <ul>
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод Equals 
                (Object) или Equals (Object, Object) — служит для проверки, являются 
                ли два объекта одним и тем же экземпляром. Для данных со значениями 
                этот метод переопределен (в классе ValueType) и позволяет проверить 
                идентичность хранимых экземплярами объекта значений. Обратите 
                внимание: когда мы сравниваем два ссылочных типа, метод Equals 
                проверяет, являются ли оба экземпляра идентичными; для данных 
                со значениями метод Equals также проверяет идентичность данных, 
                хранимых экземплярами объекта. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод ReferenceEquals 
                (Object, Object) проверяет, являются ли два объекта одним и тем 
                же экземпляром класса. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод Finalize() 
                по умолчанию не выполняет никаких действий. Этот метод может быть 
                переопределен в унаследованных классах для выполнения финальной 
                очистки памяти перед тем, как механизм сборки мусора (Garbage 
                Collector) уничтожит данный объект. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод GetHashCode() 
                служит для генерации хэш-значений (типа Integer), которые могут 
                быть использованы для хранения объектов в хэш-таблицах. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод MemberwiseClone() 
                создает точную копию объекта. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод ToString() 
                возвращает текстовое представление объекта. В большинстве случаев 
                этот метод возвращает полное имя класса для данного объекта. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Метод GetType() 
                возвращает объект типа Type для данного экземпляра класса. </font></li>
            </ul>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Ниже 
              мы расскажем, как используется класс Type. </font></p>
            <hr noshade size="1" width="85%">
            <h2><font face="Arial, Helvetica, sans-serif" size="3"><img src="rombik.gif" width="31" height="27" align="absmiddle"><a name=04></a>Класс 
              Type и пространство имен Reflection</font></h2>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Класс 
              Type является нашей точкой входа в пространство имен Reflection. 
              Отражение (Reflection) в терминах .NET — это способность изучать 
              возможности классов во время выполнения программы. Используя отражения, 
              мы можем извлекать классы, изучать их методы, свойства, конструкторы, 
              поля, события и другие члены, одним словом, получаем доступ к метаданным, 
              ассоциированным с данным классом. </font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Класс 
              Type содержит методы типа GetMethods() и GetProperties(), которые 
              могут использоваться для получения информации о членах класса. Используя 
              классы, реализованные в пространстве имен Reflection, мы можем получать 
              сведения, например, о параметрах методов (используя класс System.Reflection. 
              MethodInfo) и даже вызывать методы с помощью метода Invoke().</font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">В 
              следующем примере показано, как начать использовать механизм отражений. 
              Приведенный ниже код показывает, как с помощью метода GetType() 
              получить объект Type и каким образом можно применять ряд свойств 
              этого объекта:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">'-------------------------------------------  
' .NET Пример использования метода GetType  
'-------------------------------------------  
&nbsp;  
Imports System  
Imports System.Reflection  
&nbsp;  
Module Cons  
&nbsp;  
&nbsp;Sub Main()  
&nbsp;  
&nbsp; Dim I As Integer  
&nbsp; Dim T As Type  
&nbsp;  
&nbsp; T = I.<b>GetType()</b>  
&nbsp; Console.WriteLine("Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = "&nbsp; &amp; T.<b>Name</b>)  
&nbsp; Console.WriteLine("Module&nbsp;&nbsp;&nbsp; = "&nbsp; &amp; T.<b>Module.ToString()</b>)  
&nbsp; Console.WriteLine("Namespace = "&nbsp; &amp; T.<b>Namespace</b>)  
&nbsp;  
&nbsp;End Sub  
&nbsp;  
End Module  </font></pre>
            <p align="center"><font face="Arial, Helvetica, sans-serif" size="2"><img src="lib_4.gif" width="356" height="53"></font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Кратко 
              рассмотрим основные возможности, предоставляемые пространством имен 
              Reflection, а затем проиллюстрируем некоторые из них примерами. 
              </font></p>
            <ul>
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс Assembly 
                можно использовать для определения и загрузки сборок, загрузки 
                модулей из манифеста сборки (assembly manifest), поиска типов, 
                описанных в сборке, и создания экземпляров этих типов. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс Module 
                можно использовать для поиска классов в модуле, а также всех глобальных 
                и локальных методов, определенных в данном модуле. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс ConstructorInfo 
                можно использовать для поиска имен, параметров, модификаторов 
                доступа и другой информации о конструкторе. Поиск и вызов конструкторов 
                мы можем осуществлять с помощью методов GetConstructors() или 
                GetConstructor() объекта Type. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс MethodInfo 
                используется для поиска имен, возвращаемых типов, параметров, 
                модификаторов доступа и другой информации о методе. Поиск и вызов 
                методов мы можем осуществлять с помощью методов GetMethods() или 
                GetMethod() объекта Type. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Для поиска 
                информации о полях — именах, модификаторах доступа и т.п. — используется 
                класс FieldInfo. Кроме того, с помощью данного класса мы можем 
                получать и задавать значения полей. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс EventInfo 
                используется для поиска имен, типов данных обработчиков событий 
                и другой информации о событии. Данный класс позволяет добавлять 
                и удалять обработчики событий. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс PropertyInfo 
                используется для поиска имен, типов данных и другой информации 
                о свойствах. С помощью данного класса мы также можем получать 
                и задавать значения свойств. </font> 
              <li><font face="Arial, Helvetica, sans-serif" size="2">Класс ParameterInfo 
                используется для поиска информации о параметрах — названии, типе 
                данных, и т.п. </font></li>
            </ul>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">В 
              следующем примере показано, как получить список типов, определенных 
              в данном модуле.</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">'-------------------------------------------  
' .NET – Пример использования "отражений"  
'-------------------------------------------  
&nbsp;  
Imports System  
Imports System.Reflection  
&nbsp;  
Module Cons  
&nbsp;  
&nbsp;Sub Main()  
&nbsp;  
&nbsp; Dim I As Integer  
&nbsp; Dim T As Type  
&nbsp; Dim Types() As Type  
&nbsp; Dim M As [Module]  
&nbsp;  
&nbsp; T = I.GetType()  
&nbsp; M = T.Module  
&nbsp; Types = M.GetTypes()  
&nbsp; For Each T In Types  
&nbsp;&nbsp; Console.WriteLine(T.FullName)  
&nbsp; Next  
&nbsp;  
&nbsp;End Sub  
&nbsp;  
&nbsp;  
End Module  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Ниже 
              показана выводимая данным кодом информация: </font></p>
            <p align="center"><font face="Arial, Helvetica, sans-serif" size="2"><img src="lib_5.gif" width="350" height="236">.</font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Как 
              видно из вышеприведенного списка, в целом концепция отражений напоминает 
              использование интерфейса ITypeLibrary в Win32 API для исследования 
              библиотек типов, но версия для .NET предоставляет больше возможностей, 
              более проста в использовании и более дружественна к различным языкам 
              программирования. </font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Теперь 
              расширим наш пример и добавим информацию о свойствах, конструкторах, 
              методах, интерфейсах и событиях. Для этого воспользуемся методами 
              GetProperties(), GetConstructors(), GetMethods(), GetInterfaces() 
              и GetEvents() объекта Type. Каждый из этих методов возвращает массив 
              элементов типа PropertyInfo, MethodInfo, EventInfo и т.п. — каждый 
              тип наследует от абстрактного типа MemberInfo, который мы и используем 
              в нашем примере. Исключение составляет только тип PropertyInfo — 
              этот тип используется для того, чтобы получить дополнительную информацию 
              о свойствах:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">'-------------------------------------------  
' .NET – Пример использования "отражений"  
'-------------------------------------------  
&nbsp;  
Imports System  
Imports System.Reflection  
Module Cons  
&nbsp;  
&nbsp;&nbsp;&nbsp; Sub Main()  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim T As Type  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim MI As MemberInfo  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim Types() As Type  
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;Dim Members() As MemberInfo  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim M As [Module]  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim PI As PropertyInfo  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim PText As String  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; T = Type.GetType("System.Array")  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} : {1}", GetTypeDescription(T), T)  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Показать все свойства  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("---- Свойства ----")  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Members = T.GetProperties  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each MI In Members  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PI = MI  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If PI.CanRead And PI.CanWrite Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PText = "get; set;"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If PI.CanRead Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PText = "get"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Else  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If PI.CanWrite Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PText = "set"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1} : {2} {3}", vbTab, "Prop", _  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PText, MI.ToString)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Показать все конструкторы  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("---- Конструкторы ----")  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Members = T.GetConstructors(BindingFlags.Public Or _  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BindingFlags.Static Or BindingFlags.NonPublic Or _  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BindingFlags.Instance)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each MI In Members  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1} : {2}", vbTab, "Meth", _  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MI.ToString)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Показать все методы  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("---- Методы ----")  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Members = T.GetMethods  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each MI In Members  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1} : {2}", vbTab, "Meth", MI)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Показать все интерфейсы  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("---- Интерфейсы ----")  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Members = T.GetInterfaces  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each MI In Members  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1} : {2}", vbTab, "Intf", _  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MI.ToString)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ' Показать все события  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; '  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("---- События ----")  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Members = T.GetEvents  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; For Each MI In Members  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Console.WriteLine("{0} {1} : {2}", vbTab, "Evnt", _  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MI.ToString)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Next  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 'Next  
&nbsp;  
&nbsp;&nbsp;&nbsp; End Sub  
&nbsp;  
&nbsp;&nbsp;&nbsp; Private Function GetTypeDescription(ByVal aType As Type) As String  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dim str As String = Nothing  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If aType.IsClass Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = "Class"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If aType.IsInterface Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = "Interface"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If aType.IsValueType Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = "Struct"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;If aType.IsArray Then  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; str = "Array"  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; End If  
&nbsp;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Return str  
&nbsp;&nbsp;&nbsp; End Function 'GetTypeDescription  
&nbsp;  
End Module  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Ниже 
              показана информация, выводимая нашим примером для класса System.Array:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">Class : System.Array  
---- Свойства ----  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Prop : get Int32 Length  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Prop : get Int32 Rank  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Prop : get System.Object SyncRoot  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Prop : get Boolean IsReadOnly  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Prop : get Boolean IsFixedSize  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Prop : get Boolean IsSynchronized  
---- Конструкторы ----  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void .ctor()  
---- Методы ----  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Collections.IEnumerator GetEnumerator()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Boolean get_IsSynchronized()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Object get_SyncRoot()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void CopyTo(System.Array, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Boolean get_IsFixedSize()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Boolean get_IsReadOnly()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Object Clone()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 GetHashCode()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Boolean Equals(System.Object)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.String ToString()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Array CreateInstance(System.Type, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Array CreateInstance(System.Type, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Array CreateInstance(System.Type, Int32, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Array CreateInstance(System.Type, Int32[])  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Array CreateInstance(System.Type, Int32[], Int32[])  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Copy(System.Array, System.Array, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Copy(System.Array, Int32, System.Array, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Clear(System.Array, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Object GetValue(Int32[])  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Object GetValue(Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Object GetValue(Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Object GetValue(Int32, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void SetValue(System.Object, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void SetValue(System.Object, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void SetValue(System.Object, Int32, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void SetValue(System.Object, Int32[])  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 get_Length()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 GetLength(Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 get_Rank()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 GetUpperBound(Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 GetLowerBound(Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 BinarySearch(System.Array, System.Object)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 BinarySearch(System.Array, Int32, Int32, System.Object)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 BinarySearch(System.Array, System.Object,   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Collections.IComparer)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 BinarySearch(System.Array, Int32, Int32, System.Object,   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Collections.IComparer)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 IndexOf(System.Array, System.Object)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 IndexOf(System.Array, System.Object, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 IndexOf(System.Array, System.Object, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 LastIndexOf(System.Array, System.Object)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 LastIndexOf(System.Array, System.Object, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Int32 LastIndexOf(System.Array, System.Object, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Reverse(System.Array)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Reverse(System.Array, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, System.Array)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, System.Array, Int32, Int32)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, System.Collections.IComparer)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, System.Array, System.Collections.IComparer)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, Int32, Int32, System.Collections.IComparer)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Sort(System.Array, System.Array, Int32, Int32,   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.Collections.IComparer)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Void Initialize()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : System.Type GetType()  
---- Интерфейсы ----  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Intf : System.ICloneable  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Intf : System.Collections.IList  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Intf : System.Collections.ICollection  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Intf : System.Collections.IEnumerable  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Обратите 
              внимание на то, что параметры методов не имеют названий — в листинге 
              показаны только типы данных. Чтобы получить более подробную информацию 
              о параметрах методов, мы должны воспользоваться методом GetParameters() 
              и структурой ParameterInfo. Как это сделать, показано ниже:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">'  
' Показать все методы  
'  
&nbsp;Console.WriteLine("---- Методы ----")  
&nbsp;Members = T.GetMethods  
&nbsp;For Each MI In Members  
&nbsp; PAInfo = CType(MI, MethodInfo).GetParameters  
&nbsp; If PAInfo.Length &gt; 0 Then  
&nbsp;&nbsp; Console.WriteLine("{0} {1} : {2}{3}", vbTab, "Meth", MI.Name, "(")  
&nbsp;&nbsp; For Each PAI In PAInfo  
&nbsp;&nbsp;&nbsp; Console.WriteLine("&nbsp;&nbsp; {0} {1} : {2}", vbTab, PAI.Name, _  
&nbsp;&nbsp;&nbsp;&nbsp; PAI.ParameterType.ToString)  
&nbsp;&nbsp; Next  
&nbsp;&nbsp;&nbsp; Console.WriteLine("{0}{1}", vbTab, ")")  
&nbsp;&nbsp; Else  
&nbsp;&nbsp;&nbsp; Console.WriteLine("&nbsp;&nbsp; {0} {1} : {2}{3}", vbTab, "Meth", MI.Name, _  
&nbsp;&nbsp;&nbsp;&nbsp; "()")  
&nbsp;&nbsp; End If  
Next  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Теперь 
              мы знаем названия параметров и их тип:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">---- Методы ----  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : GetEnumerator()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : get_IsSynchronized()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : get_SyncRoot()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : CopyTo(  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;array : System.Array  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;index : System.Int32  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : get_IsFixedSize()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : get_IsReadOnly()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Clone()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : GetHashCode()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : Equals(  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;obj : System.Object  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : ToString()  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;Meth : CreateInstance(  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;elementType : System.Type  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;length : System.Int32  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )  
&nbsp;  
...  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">Для 
              того чтобы получить доступ к сборке (в нашем примере мы использовали 
              сборку по умолчанию (— mscorlib.dll), всегда загруженную в память), 
              надо обратиться к этой сборке. Вот как это сделать:</font></p>
            <pre><font face="Arial, Helvetica, sans-serif" size="2">Imports System.Reflection  
Imports System.IO  
Imports Microsoft.Win32  
Imports Microsoft.VisualBasic  
&nbsp;  
&nbsp;  
Module Module1  
&nbsp;  
&nbsp;Sub Main()  
&nbsp;  
&nbsp; Dim Asm As [Assembly]  
&nbsp; Dim Mdls As [Module]()  
&nbsp; Dim Mdl As [Module]  
&nbsp; Asm = [Assembly].LoadFrom(GetNetFrameworkPath() + _  
&nbsp;&nbsp; "system.windows.forms.dll")  
&nbsp; Mdls = Asm.GetModules  
&nbsp; Mdl = Mdls(0)  
&nbsp;  
&nbsp;End Sub  
&nbsp;  
&nbsp;Function GetNetFrameworkPath() As String  
&nbsp;  
&nbsp; Dim Key As RegistryKey = _  
&nbsp;&nbsp; Registry.LocalMachine.OpenSubKey("SOFTWARE\Microsoft\.NETFramework")  
&nbsp; GetNetFrameworkPath = CType(Key.GetValue("InstallRoot"), String) + _  
&nbsp;&nbsp; CType(Key.GetValue("Version"), String) + "\"  
&nbsp;  
&nbsp;End Function  
&nbsp;  
End Module  </font></pre>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">После 
              того как мы получили доступ к модулю, мы можем либо изучить определенные 
              в нем типы (как это сделать, показано в первом примере), либо получить 
              информацию об интересующем нам типе.</font></p>
            <p align="justify"><font face="Arial, Helvetica, sans-serif" size="2">В 
              следующем номере мы продолжим знакомство с библиотекой классов .NET 
              Framework Class Library. Мы рассмотрим массивы (класс System.Array) 
              и коллекции (пространство имен System.Collections). </font></p>
            <!-- InstanceEndEditable --></td>
        </tr>
      </table>
      </td>
  </tr>
</table>
<table width="100%" height="30" border="0" cellpadding="6" cellspacing="0">
  <tr> 
    <td background="fon2.gif" bgcolor="#FFFFCC"> 
      <div align="left"><font color="#000066" size="2" face="Arial, Helvetica, sans-serif">&copy; 
        <a href="mailto:stasmit@mail.ru">Волшебник Станислав</a>, <a href="http://www.mista.ru"><br>
        www.mista.ru</a>, 1997-2003</font></div></td>
    <td background="fon2.gif" bgcolor="#FFFFCC"> 

      <table border="0" align="center" cellpadding="2" cellspacing="0">
        <tr valign="middle" align="center"> 
          <td width="95"> 
            <script language="javascript"><!--
Mu="u045.09.spylog.com";Md=document;Mnv=navigator;Mp=0;
Md.cookie="b=b";Mc=0;if(Md.cookie)Mc=1;Mrn=Math.random();
Mn=(Mnv.appName.substring(0,2)=="Mi")?0:1;Mt=(new Date()).getTimezoneOffset();
Mz="p="+Mp+"&rn="+Mrn+"&c="+Mc+"&t="+Mt;
if(self!=top){Mfr=1;}else{Mfr=0;}Msl="1.0";
//--></script><script language="javascript1.1"><!--
Mpl="";Msl="1.1";Mj = (Mnv.javaEnabled()?"Y":"N");Mz+='&j='+Mj;
//--></script><script language="javascript1.2"><!-- 
Msl="1.2";Ms=screen;Mpx=(Mn==0)?Ms.colorDepth:Ms.pixelDepth;
Mz+="&wh="+Ms.width+'x'+Ms.height+"&px="+Mpx;
//--></script><script language="javascript1.3"><!--
Msl="1.3";//--></script><script language="javascript"><!--
My="";My+="<a href='http://"+Mu+"/cnt?cid=4509&f=3&p="+Mp+"&rn="+Mrn+"' target='_blank'>";
My+="<img src='http://"+Mu+"/cnt?cid=4509&"+Mz+"&sl="+Msl+"&r="+escape(Md.referrer)+"&fr="+Mfr+"&pg="+escape(window.location.href);
My+="' border=0 width=88 height=31 alt='SpyLOG'>";
My+="</a>";Md.write(My);//--></script><noscript>
<a href="http://u045.09.spylog.com/cnt?cid=4509&f=3&p=0" target="_blank">
<img src="http://u045.09.spylog.com/cnt?cid=4509&p=0" alt='SpyLOG' border='0' width=88 height=31 >
</a></noscript></noscript>
            </td>
          <td width="95"> <a href="http://www.1c.klim.org/topsites/index.html" target="_blank"> 
            <img src="http://1c.klim.org/topsites/topsites.php?ID=143" width="88" height="31" border="0" alt="1C:TOP-100"></a></td>
          <td width="95"> <script language="javascript">
hotlog_js="1.0";
hotlog_r=""+Math.random()+"&s=23314&im=101&r="+escape(document.referrer)+"&pg="+
escape(window.location.href);
document.cookie="hotlog=1; path=/"; hotlog_r+="&c="+(document.cookie?"Y":"N");
</script>
            <script language="javascript1.1">
hotlog_js="1.1";hotlog_r+="&j="+(navigator.javaEnabled()?"Y":"N")</script> <script language="javascript1.2">
hotlog_js="1.2";
hotlog_r+="&wh="+screen.width+'x'+screen.height+"&px="+
(((navigator.appName.substring(0,3)=="Mic"))?
screen.colorDepth:screen.pixelDepth)</script> <script language="javascript1.3">hotlog_js="1.3"</script> 
            <script language="javascript">hotlog_r+="&js="+hotlog_js;
document.write("<a href='http://click.hotlog.ru/?23314' target='_top'><img "+
" src='http://hit2.hotlog.ru/cgi-bin/hotlog/count?"+
hotlog_r+"&' border=0 width=88 height=31 alt=HotLog></a>")</script> <noscript>
            <a href=http://click.hotlog.ru/?23314 target=_top><img
src="http://hit2.hotlog.ru/cgi-bin/hotlog/count?s=23314&im=101" border=0 
width="88" height="31" alt="HotLog"></a></noscript> </td>
        </tr>
      </table>
      
    </td>
    <td background="../fon2.gif"> 
      <div align="right"><a href="#begin"> Наверх&nbsp;<img src="../top.gif" alt="^" width="16" height="14" border="0"></a></div></td>
  </tr>
</table>
</body>
<!-- InstanceEnd --></html>
